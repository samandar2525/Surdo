// ignore_for_file: use_key_in_widget_constructors

import 'package:flutter/material.dart';
import 'package:camera/camera.dart';
import 'package:flutter_tts/flutter_tts.dart';
import 'package:tflite/tflite.dart';
import 'dart:async';
import 'dart:math';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  final cameras = await availableCameras();
  runApp(MyApp(camera: cameras.first));
}

class MyApp extends StatelessWidget {
  final CameraDescription camera;

  const MyApp({required this.camera});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Qo\'l Ishoralari Tarjimon',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: MyHomePage(camera: camera),
    );
  }
}

class MyHomePage extends StatefulWidget {
  final CameraDescription camera;

  const MyHomePage({required this.camera});

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  late CameraController _controller;
  late Future<void> _initializeControllerFuture;
  late FlutterTts _flutterTts;
  bool _isDetecting = false;
  String _recognizedSign = "";
  String _translatedText = "";
  String _lastSpokenText = ""; // ðŸ†• Yangi oâ€˜zgaruvchi
  bool _isModelLoading = false;
  bool _isSpeaking = false;
  final List<String> _signHistory = [];
  final Random _random = Random();

  final Map<String, String> _signTranslations = {
    'index_finger': 'Salom',
    'thumb_up': 'Zo\'r',
    'index_middle_fingers': 'Ahvollar yaxshimi?',
    'no_hand': '',
  };

  @override
  void initState() {
    super.initState();
    _flutterTts = FlutterTts();
    _initializeTts();
    _initializeCamera();
    _loadModel();
  }

  Future<void> _initializeTts() async {
    await _flutterTts.setLanguage("uz-UZ");
    await _flutterTts.setSpeechRate(0.5);
    await _flutterTts.setVolume(1.0);
    await _flutterTts.setPitch(1.0);
  }

  Future<void> _initializeCamera() async {
    _controller = CameraController(widget.camera, ResolutionPreset.high);
    _initializeControllerFuture = _controller.initialize();
    await _initializeControllerFuture;

    _controller.startImageStream((CameraImage image) {
      if (!_isDetecting && !_isModelLoading) {
        _isDetecting = true;
        _recognizeSigns(image);
      }
    });
  }

  Future<void> _loadModel() async {
    setState(() {
      _isModelLoading = true;
      _recognizedSign = "Model yuklanmoqda...";
    });

    try {
      String? res = await Tflite.loadModel(
        model: "assets/sign_model.tflite",
        labels: "assets/sign_labels.txt",
        numThreads: 2,
        isAsset: true,
      );
      print("Model loaded: $res");
    } catch (e) {
      print("Error loading model: $e");
      _startDemoMode();
    }

    setState(() {
      _isModelLoading = false;
    });
  }

  void _startDemoMode() {
    Timer.periodic(Duration(seconds: 3), (timer) {
      if (!_isModelLoading) {
        final demoSigns = [
          'no_hand',
          'index_finger',
          'thumb_up',
          'index_middle_fingers',
        ];
        final randomSign = demoSigns[_random.nextInt(demoSigns.length)];
        _processRecognizedSign(randomSign);
      }
    });
  }

  Future<void> _recognizeSigns(CameraImage image) async {
    if (_isModelLoading) return;

    try {
      var recognitions = await Tflite.runModelOnFrame(
        bytesList: image.planes.map((plane) => plane.bytes).toList(),
        imageHeight: image.height,
        imageWidth: image.width,
        imageMean: 127.5,
        imageStd: 127.5,
        rotation: 90,
        numResults: 1,
        threshold: 0.8,
        asynch: true,
      );

      if (recognitions != null && recognitions.isNotEmpty) {
        final recognizedSign = recognitions[0]['label'];
        final confidence = recognitions[0]['confidence'];

        if (confidence > 0.8) {
          _processRecognizedSign(recognizedSign);
        }
      }
    } catch (e) {
      print("Error recognizing sign: $e");
    } finally {
      _isDetecting = false;
    }
  }

  void _processRecognizedSign(String sign) {
    final translated = _signTranslations[sign.toLowerCase()] ?? "";

    if (sign == 'no_hand' || translated.isEmpty) {
      setState(() {
        _recognizedSign = "";
        _translatedText = "";
      });
      return;
    }

    if (_lastSpokenText == translated) return;

    setState(() {
      _recognizedSign = "Aniqlangan ishora: ${sign.replaceAll('_', ' ')}";
      _translatedText = "Tarjima: $translated";
      _signHistory.insert(0, "${sign.replaceAll('_', ' ')} â†’ $translated");
      if (_signHistory.length > 5) {
        _signHistory.removeLast();
      }
    });

    if (!_isSpeaking) {
      _speakTranslation(translated);
      _lastSpokenText = translated;
    }
  }

  Future<void> _speakTranslation(String text) async {
    if (_isSpeaking || text.isEmpty) return;

    _isSpeaking = true;
    await _flutterTts.speak(text);
    await Future.delayed(Duration(seconds: max(1, text.length ~/ 5)));
    _isSpeaking = false;
  }

  @override
  void dispose() {
    _controller.dispose();
    Tflite.close();
    _flutterTts.stop();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Qo\'l Ishoralari Tarjimon'),
        actions: [
          IconButton(
            icon: Icon(_isModelLoading ? Icons.sync_disabled : Icons.sync),
            onPressed: _isModelLoading ? null : _loadModel,
            tooltip: 'Modelni qayta yuklash',
          ),
        ],
      ),
      body: FutureBuilder<void>(
        future: _initializeControllerFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.done) {
            return Column(
              children: [
                Expanded(
                  flex: 3,
                  child: Stack(
                    children: [
                      CameraPreview(_controller),
                      if (_recognizedSign.isNotEmpty)
                        Positioned(
                          bottom: 10,
                          left: 0,
                          right: 0,
                          child: Container(
                            padding: const EdgeInsets.all(12),
                            color: Colors.black.withOpacity(0.6),
                            child: Column(
                              children: [
                                Text(
                                  _recognizedSign,
                                  style: const TextStyle(
                                    color: Colors.white,
                                    fontSize: 20,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                                const SizedBox(height: 8),
                                Text(
                                  _translatedText,
                                  style: const TextStyle(
                                    color: Colors.amber,
                                    fontSize: 24,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      if (_isModelLoading)
                        const Center(
                          child: Column(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              CircularProgressIndicator(),
                              SizedBox(height: 10),
                              Text(
                                "Model yuklanmoqda...",
                                style: TextStyle(color: Colors.white),
                              ),
                            ],
                          ),
                        ),
                    ],
                  ),
                ),
                Expanded(
                  flex: 2,
                  child: Container(
                    padding: const EdgeInsets.all(16),
                    color: Colors.grey[200],
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text(
                          "Qo'llanma:",
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 5),
                        const Text(
                          "1. Ko'rsatkich barmoq - Salom\n"
                          "2. Sinchaloq barmoq - Zo'r\n"
                          "3. Ko'rsatkich + sinchaloq barmoq - Ahvollar yaxshimi?\n",
                          style: TextStyle(fontSize: 16),
                        ),
                        const Divider(),
                        const Text(
                          "So'nggi aniqlangan ishoralar:",
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 10),
                        Expanded(
                          child: ListView.builder(
                            itemCount: _signHistory.length,
                            itemBuilder: (context, index) {
                              return ListTile(
                                title: Text(
                                  _signHistory[index],
                                  style: const TextStyle(fontSize: 16),
                                ),
                              );
                            },
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            );
          } else {
            return const Center(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  CircularProgressIndicator(),
                  SizedBox(height: 20),
                  Text("Kamera ishga tushirilmoqda..."),
                ],
              ),
            );
          }
        },
      ),
    );
  }
}
